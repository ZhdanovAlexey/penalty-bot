#!/bin/bash

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –≤ Docker-–æ–∫—Ä—É–∂–µ–Ω–∏–∏
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./backup_docker.sh [data|full|volumes]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
detect_app_dir() {
    local possible_dirs=(
        "/home/ubuntu/penalty-bot"
        "/opt/penalty-bot"
        "$(pwd)"
        "$(dirname "$(pwd)")"
    )
    
    for dir in "${possible_dirs[@]}"; do
        if [ -d "$dir" ] && [ -f "$dir/bot.py" ]; then
            echo "$dir"
            return 0
        fi
    done
    
    return 1
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
APP_DIR=$(detect_app_dir)
if [ -z "$APP_DIR" ]; then
    error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ penalty-bot"
    exit 1
fi

BACKUP_BASE_DIR="/var/backups/penalty-bot"
DATE_STAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_TYPE="${1:-data}"

log "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤: $APP_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤
create_backup_dir() {
    if [ ! -d "$BACKUP_BASE_DIR" ]; then
        log "–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤: $BACKUP_BASE_DIR"
        mkdir -p "$BACKUP_BASE_DIR"
        chmod 755 "$BACKUP_BASE_DIR"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
get_container_name() {
    local container_name=""
    
    # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ —Ä–∞–∑–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    if command -v docker >/dev/null 2>&1; then
        container_name=$(docker ps --filter "name=penalty" --format "{{.Names}}" | head -1)
        
        if [ -z "$container_name" ]; then
            container_name=$(docker ps --filter "name=bot" --format "{{.Names}}" | head -1)
        fi
        
        if [ -z "$container_name" ]; then
            # –ò—â–µ–º –ø–æ –æ–±—Ä–∞–∑—É
            container_name=$(docker ps --format "{{.Names}}" | grep -E "(penalty|bot)" | head -1)
        fi
    fi
    
    echo "$container_name"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
backup_docker_data() {
    local backup_file="$BACKUP_BASE_DIR/penalty-bot-docker-data-$DATE_STAMP.tar.gz"
    local container_name=$(get_container_name)
    
    log "–°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    
    if [ -n "$container_name" ]; then
        log "–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container_name"
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        docker exec "$container_name" tar -czf /tmp/backup-data.tar.gz /app/data 2>/dev/null || \
        docker exec "$container_name" tar -czf /tmp/backup-data.tar.gz /data 2>/dev/null || \
        docker exec "$container_name" tar -czf /tmp/backup-data.tar.gz ./data 2>/dev/null || {
            warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
            backup_local_data
            return $?
        }
        
        # –ö–æ–ø–∏—Ä—É–µ–º –±—ç–∫–∞–ø –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        docker cp "$container_name:/tmp/backup-data.tar.gz" "$backup_file" || {
            error "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
            return 1
        }
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        docker exec "$container_name" rm -f /tmp/backup-data.tar.gz 2>/dev/null || true
        
    else
        warn "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
        backup_local_data
        return $?
    fi
    
    local size=$(du -h "$backup_file" | cut -f1)
    log "‚úÖ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: $(basename "$backup_file") ($size)"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ç–∫–∞–ø–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
backup_local_data() {
    local backup_file="$BACKUP_BASE_DIR/penalty-bot-local-data-$DATE_STAMP.tar.gz"
    
    if [ ! -d "$APP_DIR/data" ]; then
        warn "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö $APP_DIR/data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é"
        mkdir -p "$APP_DIR/data"
    fi
    
    tar -czf "$backup_file" -C "$APP_DIR" data/ 2>/dev/null || {
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö"
        return 1
    }
    
    local size=$(du -h "$backup_file" | cut -f1)
    log "‚úÖ –ë—ç–∫–∞–ø –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: $(basename "$backup_file") ($size)"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ç–∫–∞–ø–∞ Docker volumes
backup_docker_volumes() {
    local backup_file="$BACKUP_BASE_DIR/penalty-bot-volumes-$DATE_STAMP.tar.gz"
    
    log "–°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø Docker volumes..."
    
    if ! command -v docker >/dev/null 2>&1; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    # –ò—â–µ–º volumes —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å penalty-bot
    local volumes=$(docker volume ls --filter "name=penalty" --format "{{.Name}}")
    
    if [ -z "$volumes" ]; then
        volumes=$(docker volume ls --filter "name=bot" --format "{{.Name}}")
    fi
    
    if [ -z "$volumes" ]; then
        warn "Docker volumes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±—ç–∫–∞–ø–∞ volumes
    local temp_container="penalty-backup-$(date +%s)"
    
    echo "$volumes" | while read -r volume; do
        if [ -n "$volume" ]; then
            log "–°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø volume: $volume"
            docker run --rm \
                -v "$volume:/data" \
                -v "$BACKUP_BASE_DIR:/backup" \
                --name "$temp_container" \
                alpine tar -czf "/backup/volume-$volume-$DATE_STAMP.tar.gz" /data 2>/dev/null || \
                warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø volume: $volume"
        fi
    done
    
    log "‚úÖ –ë—ç–∫–∞–ø Docker volumes –∑–∞–≤–µ—Ä—à–µ–Ω"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
backup_full() {
    local backup_file="$BACKUP_BASE_DIR/penalty-bot-docker-full-$DATE_STAMP.tar.gz"
    
    log "–°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    tar -czf "$backup_file" \
        --exclude="$APP_DIR/venv" \
        --exclude="$APP_DIR/.venv" \
        --exclude="$APP_DIR/logs/*.log" \
        --exclude="$APP_DIR/__pycache__" \
        --exclude="$APP_DIR/.git" \
        --exclude="$APP_DIR/node_modules" \
        -C "$(dirname "$APP_DIR")" \
        "$(basename "$APP_DIR")" 2>/dev/null || {
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞"
        return 1
    }
    
    local size=$(du -h "$backup_file" | cut -f1)
    log "‚úÖ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $(basename "$backup_file") ($size)"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
show_stats() {
    log "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤ Docker-–æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    echo ""
    
    echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $APP_DIR"
    echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤: $BACKUP_BASE_DIR"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker
    if command -v docker >/dev/null 2>&1; then
        local container_name=$(get_container_name)
        if [ -n "$container_name" ]; then
            echo "üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container_name"
            echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $(docker inspect --format='{{.State.Status}}' "$container_name" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")"
        else
            echo "üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        local volumes=$(docker volume ls --filter "name=penalty" --format "{{.Name}}" | wc -l)
        echo "üíæ Docker volumes: $volumes"
    else
        echo "üê≥ Docker: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    echo ""
    
    if [ -d "$BACKUP_BASE_DIR" ]; then
        local total_size=$(du -sh "$BACKUP_BASE_DIR" 2>/dev/null | cut -f1)
        local backup_count=$(find "$BACKUP_BASE_DIR" -name "*.tar.gz" -type f | wc -l)
        
        echo "üì¶ –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: $backup_count"
        echo "üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
        echo ""
        
        if [ $backup_count -gt 0 ]; then
            echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã:"
            find "$BACKUP_BASE_DIR" -name "*.tar.gz" -type f -printf "%T@ %p\n" 2>/dev/null | \
            sort -nr | \
            head -5 | \
            while read -r timestamp filepath; do
                local date_str=$(date -d "@$timestamp" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || date -r "$timestamp" '+%Y-%m-%d %H:%M:%S')
                local size=$(du -h "$filepath" | cut -f1)
                echo "  $(basename "$filepath") - $date_str ($size)"
            done
        fi
    else
        echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üê≥ –°–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–æ–≤ Penalty Bot (Docker)${NC}"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if [[ $EUID -ne 0 ]]; then
        error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    create_backup_dir
    
    case "$BACKUP_TYPE" in
        "data")
            backup_docker_data
            ;;
        "full")
            backup_full
            ;;
        "volumes")
            backup_docker_volumes
            ;;
        "all")
            backup_docker_data
            backup_full
            backup_docker_volumes
            ;;
        "stats")
            show_stats
            exit 0
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [data|full|volumes|all|stats]"
            echo ""
            echo "–¢–∏–ø—ã –±—ç–∫–∞–ø–æ–≤ –¥–ª—è Docker:"
            echo "  data     - –î–∞–Ω–Ω—ã–µ –∏–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
            echo "  full     - –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            echo "  volumes  - –ë—ç–∫–∞–ø Docker volumes"
            echo "  all      - –í—Å–µ —Ç–∏–ø—ã –±—ç–∫–∞–ø–æ–≤"
            echo "  stats    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ç–∫–∞–ø–æ–≤"
            exit 1
            ;;
    esac
    
    echo ""
    show_stats
    
    log "üéâ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 