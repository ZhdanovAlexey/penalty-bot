#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ Telegram –±–æ—Ç–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./backup.sh [full|data]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
APP_DIR="/opt/penalty-bot"
BACKUP_BASE_DIR="/var/backups/penalty-bot"
DATE_STAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_TYPE="${1:-data}"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤
create_backup_dir() {
    if [ ! -d "$BACKUP_BASE_DIR" ]; then
        log "–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤: $BACKUP_BASE_DIR"
        mkdir -p "$BACKUP_BASE_DIR"
        chmod 755 "$BACKUP_BASE_DIR"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
check_app_exists() {
    if [ ! -d "$APP_DIR" ]; then
        error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ $APP_DIR"
        error "–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –µ—â–µ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏–ª–∏ –ø—É—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
cleanup_old_backups() {
    local backup_pattern="$1"
    local keep_count=7
    
    log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ $keep_count)..."
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
    find "$BACKUP_BASE_DIR" -name "$backup_pattern" -type f | \
    sort -r | \
    tail -n +$((keep_count + 1)) | \
    while read -r old_backup; do
        log "–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: $(basename "$old_backup")"
        rm -f "$old_backup"
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö
backup_data() {
    local backup_file="$BACKUP_BASE_DIR/penalty-bot-data-$DATE_STAMP.tar.gz"
    
    log "–°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö..."
    
    if [ ! -d "$APP_DIR/data" ]; then
        warn "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö $APP_DIR/data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–∞–Ω–Ω—ã—Ö
    tar -czf "$backup_file" -C "$APP_DIR" data/ 2>/dev/null || {
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö"
        return 1
    }
    
    local size=$(du -h "$backup_file" | cut -f1)
    log "‚úÖ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: $(basename "$backup_file") ($size)"
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –¥–∞–Ω–Ω—ã—Ö
    cleanup_old_backups "penalty-bot-data-*.tar.gz"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
backup_full() {
    local backup_file="$BACKUP_BASE_DIR/penalty-bot-full-$DATE_STAMP.tar.gz"
    
    log "–°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ venv)
    tar -czf "$backup_file" \
        --exclude="$APP_DIR/venv" \
        --exclude="$APP_DIR/logs/*.log" \
        --exclude="$APP_DIR/__pycache__" \
        --exclude="$APP_DIR/.git" \
        -C "$(dirname "$APP_DIR")" \
        "$(basename "$APP_DIR")" 2>/dev/null || {
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞"
        return 1
    }
    
    local size=$(du -h "$backup_file" | cut -f1)
    log "‚úÖ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $(basename "$backup_file") ($size)"
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª–Ω—ã–µ –±—ç–∫–∞–ø—ã
    cleanup_old_backups "penalty-bot-full-*.tar.gz"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
backup_config() {
    local backup_file="$BACKUP_BASE_DIR/penalty-bot-config-$DATE_STAMP.tar.gz"
    
    log "–°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local temp_dir=$(mktemp -d)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    [ -f "$APP_DIR/.env" ] && cp "$APP_DIR/.env" "$temp_dir/"
    [ -f "$APP_DIR/data/service_account.json" ] && cp "$APP_DIR/data/service_account.json" "$temp_dir/"
    
    if [ "$(ls -A "$temp_dir")" ]; then
        tar -czf "$backup_file" -C "$temp_dir" . 2>/dev/null
        local size=$(du -h "$backup_file" | cut -f1)
        log "‚úÖ –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: $(basename "$backup_file") ($size)"
    else
        warn "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    rm -rf "$temp_dir"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—ç–∫–∞–ø–æ–≤
show_backup_stats() {
    log "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤:"
    echo ""
    
    if [ -d "$BACKUP_BASE_DIR" ]; then
        local total_size=$(du -sh "$BACKUP_BASE_DIR" 2>/dev/null | cut -f1)
        local backup_count=$(find "$BACKUP_BASE_DIR" -name "*.tar.gz" -type f | wc -l)
        
        echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤: $BACKUP_BASE_DIR"
        echo "üì¶ –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: $backup_count"
        echo "üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
        echo ""
        
        if [ $backup_count -gt 0 ]; then
            echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã:"
            find "$BACKUP_BASE_DIR" -name "*.tar.gz" -type f -printf "%T@ %p\n" | \
            sort -nr | \
            head -5 | \
            while read -r timestamp filepath; do
                local date_str=$(date -d "@$timestamp" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || date -r "$timestamp" '+%Y-%m-%d %H:%M:%S')
                local size=$(du -h "$filepath" | cut -f1)
                echo "  $(basename "$filepath") - $date_str ($size)"
            done
        fi
    else
        echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üóÑÔ∏è  –°–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–æ–≤ Penalty Bot${NC}"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if [[ $EUID -ne 0 ]]; then
        error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    create_backup_dir
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    check_app_exists
    
    case "$BACKUP_TYPE" in
        "data")
            backup_data
            ;;
        "full")
            backup_full
            ;;
        "config")
            backup_config
            ;;
        "all")
            backup_data
            backup_config
            backup_full
            ;;
        "stats")
            show_backup_stats
            exit 0
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [data|full|config|all|stats]"
            echo ""
            echo "–¢–∏–ø—ã –±—ç–∫–∞–ø–æ–≤:"
            echo "  data   - –¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —Ñ–∞–π–ª—ã)"
            echo "  config - –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (.env, –∫–ª—é—á–∏ API)"
            echo "  full   - –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            echo "  all    - –í—Å–µ —Ç–∏–ø—ã –±—ç–∫–∞–ø–æ–≤"
            echo "  stats  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ç–∫–∞–ø–æ–≤"
            exit 1
            ;;
    esac
    
    echo ""
    show_backup_stats
    
    log "üéâ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 