from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
import random

from services.sheets import GoogleSheetsService
from services.calculator import PenaltyCalculator
from services.database import db
from utils.validators import validate_amount, validate_date

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
# –£–±–∏—Ä–∞–µ–º "-100" –≤ –Ω–∞—á–∞–ª–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–µ—Ñ–∏–∫—Å Telegram
CHANNEL_ID = -1002666468146
# ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
# –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å invite-—Å—Å—ã–ª–∫—É
CHANNEL_LINK = "https://t.me/sviridov_mikhail_Lawyer"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å admin –∫–æ–º–∞–Ω–¥—ã
ADMIN_IDS = [862754324, 1698240710]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SUBSCRIPTION_MESSAGES = [
    "‚ö†Ô∏è –í—ã –≤—Å—ë –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª\n2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª",
    "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª –∏ –∑–∞—Ç–µ–º ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª",
    "‚ùó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª",
    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª –∏ –∑–∞—Ç–µ–º ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª"
]

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
class AdminForm(StatesGroup):
    add_user_id = State()

# Define states for the conversation
class PenaltyForm(StatesGroup):
    check_subscription = State()
    contract_amount = State()
    deadline_date = State()
    calculation_date = State()
    participant_type = State()
    is_unique = State()
    

# Initialize router
router = Router()


# Function to check channel subscription
async def is_subscribed(bot: Bot, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
    
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–º –Ω–µ—Ç - 
    –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ API Telegram
    """
    # Debug logging
    print(f"Checking subscription for user {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_status = db.is_user_subscribed(user_id)
    print(f"DB subscription status: {db_status}")
    
    if db_status:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API Telegram
    try:
        print(f"Checking via Telegram API, channel_id={CHANNEL_ID}")
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        print(f"Member status: {member.status}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª (left) –∏ –Ω–µ –±—ã–ª –∫–∏–∫–Ω—É—Ç (kicked)
        is_subscribed_via_api = member.status not in ['left', 'kicked']
        print(f"API subscription result: {is_subscribed_via_api}")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if is_subscribed_via_api:
            db.add_subscribed_user(
                user_id=user_id,
                is_subscribed=True
            )
        
        return is_subscribed_via_api
        
    except TelegramAPIError as e:
        # –í–µ—Ä–æ—è—Ç–Ω–æ, –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
        print(f"Telegram API error: {e}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        print(f"Auto-approving user {user_id} due to channel configuration error")
        db.add_subscribed_user(
            user_id=user_id,
            is_subscribed=True
        )
        return True


# Admin command to manually add a user as subscribed
@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    if message.from_user.id not in ADMIN_IDS:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        return
    
    commands_info = (
        "üîê <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/adduser - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ ID\n"
        "/stats - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"
    )
    
    await message.answer(commands_info, parse_mode="HTML")


# Admin command to add a user as subscribed
@router.message(Command("adduser"))
async def cmd_add_user(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    if message.from_user.id not in ADMIN_IDS:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ:\n\n"
        "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
    )
    await state.set_state(AdminForm.add_user_id)


# Cancel command handler
@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.clear()
    await message.answer("‚úÖ –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# Handler for user ID input
@router.message(AdminForm.add_user_id)
async def process_add_user_id(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith('/'):
        await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")
        return
    
    # Validate user ID
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
        return
    
    # Add user to database
    success = db.add_subscribed_user(user_id)
    
    if success:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π.")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")
    
    await state.clear()


# Admin command to get statistics
@router.message(Command("stats"))
async def cmd_stats(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    if message.from_user.id not in ADMIN_IDS:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    stats = db.get_statistics()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    avg_penalty = round(stats.get("avg_penalty", 0), 2)
    avg_contract = round(stats.get("avg_contract_amount", 0), 2)
    
    stats_message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('subscribed_users', 0)}\n"
        f"üßÆ –í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {stats.get('total_calculations', 0)}\n\n"
        f"üí∞ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –î–î–£: {avg_contract:,.2f} —Ä—É–±.\n"
        f"üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –Ω–µ—É—Å—Ç–æ–π–∫–∏: {avg_penalty:,.2f} —Ä—É–±.\n\n"
        f"üë§ –†–∞—Å—á–µ—Ç—ã –¥–ª—è —Ñ–∏–∑–ª–∏—Ü: {stats.get('individual_calculations', 0)}\n"
        f"üè¢ –†–∞—Å—á–µ—Ç—ã –¥–ª—è —é—Ä–ª–∏—Ü: {stats.get('legal_calculations', 0)}\n"
        f"üèó –†–∞—Å—á–µ—Ç—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {stats.get('unique_objects_calculations', 0)}"
    )
    
    await message.answer(stats_message, parse_mode="HTML")


# Help command handler
@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    help_text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "üöÄ <b>/start</b> - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –Ω–µ—É—Å—Ç–æ–π–∫–∏ –ø–æ –î–î–£\n"
        "üîÑ <b>/reset</b> - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—Å—á–µ—Ç –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "‚ùì <b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é\n"
        "‚ÑπÔ∏è <b>/about</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Ä–∞—Å—á–µ—Ç–∞—Ö\n\n"
        
        "üìã <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n"
        "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
        "3Ô∏è‚É£ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞:\n"
        "   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ –î–î–£\n"
        "   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞–π–Ω—é—é –¥–∞—Ç—É –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞\n"
        "   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ—É—Å—Ç–æ–π–∫–∏\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–§–õ/–Æ–õ)\n"
        "   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞\n\n"
        
        "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –î–∞—Ç—ã –≤–≤–æ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.2025)\n"
        "‚Ä¢ –°—É–º–º—É –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 500 000)\n"
        "‚Ä¢ –î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –∫—Ä–∞–π–Ω–µ–π –¥–∞—Ç—ã –ø–µ—Ä–µ–¥–∞—á–∏\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n\n"
        
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–∞–Ω–∞–ª–∞."
    )
    
    await message.answer(help_text, parse_mode="HTML")


# About command handler
@router.message(Command("about"))
async def cmd_about(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    about_text = (
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –Ω–µ—É—Å—Ç–æ–π–∫–∏ –ø–æ –î–î–£</b>\n\n"
        
        "üéØ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n"
        "–ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ—É—Å—Ç–æ–π–∫—É –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞ –¥–æ–ª–µ–≤–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ "
        "–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§.\n\n"
        
        "‚öñÔ∏è <b>–ü—Ä–∞–≤–æ–≤–∞—è –æ—Å–Ω–æ–≤–∞:</b>\n"
        "‚Ä¢ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 214-–§–ó \"–û–± —É—á–∞—Å—Ç–∏–∏ –≤ –¥–æ–ª–µ–≤–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ\"\n"
        "‚Ä¢ –°—Ç–∞–≤–∫–∏ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–§\n"
        "‚Ä¢ –£—á–µ—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ –º–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ—É—Å—Ç–æ–π–∫–∏\n\n"
        
        "üßÆ <b>–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞:</b>\n"
        "‚Ä¢ <b>–§–∏–∑–ª–∏—Ü–∞ (–æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã):</b> 1/150 √ó —Å—Ç–∞–≤–∫–∞ –¶–ë √ó —Å—É–º–º–∞ –î–î–£ √ó –¥–Ω–∏\n"
        "‚Ä¢ <b>–Æ—Ä–ª–∏—Ü–∞ (–æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã):</b> 1/300 √ó —Å—Ç–∞–≤–∫–∞ –¶–ë √ó —Å—É–º–º–∞ –î–î–£ √ó –¥–Ω–∏\n"
        "‚Ä¢ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:</b> 1/300 √ó —Å—Ç–∞–≤–∫–∞ –¶–ë √ó —Å—É–º–º–∞ –î–î–£ √ó –¥–Ω–∏ (–º–∞–∫—Å. 5%)\n\n"
        
        "üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ –°—Ç–∞–≤–∫–∏ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –º–æ—Ä–∞—Ç–æ—Ä–∏—è\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ\n\n"
        
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. "
        "–î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —é—Ä–∏—Å—Ç–æ–º.\n\n"
        
        "üîÑ <b>–í–µ—Ä—Å–∏—è:</b> 2.0\n"
        "üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> –Ø–Ω–≤–∞—Ä—å 2025"
    )
    
    await message.answer(about_text, parse_mode="HTML")


# Start command handler
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    db.add_subscribed_user(
        user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username,
        is_subscribed=False  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ True –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_user_subscribed = await is_subscribed(bot, message.from_user.id)
    
    if not is_user_subscribed:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
        builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ—É—Å—Ç–æ–π–∫–∏ –ø–æ –î–î–£!\n\n"
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(PenaltyForm.check_subscription)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    db.add_subscribed_user(
        user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username,
        is_subscribed=True
    )
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ—É—Å—Ç–æ–π–∫–∏ –ø–æ –î–î–£!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –ø–æ –î–î–£ (–≤ —Ä—É–±–ª—è—Ö). –ù–∞–ø—Ä–∏–º–µ—Ä: 3500000"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="quick_help")
    builder.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="quick_about")
    builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    
    await message.answer(
        "üí° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(PenaltyForm.contract_amount)


# Callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Ä—É—á–Ω–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ
@router.callback_query(PenaltyForm.check_subscription, F.data == "check_subscription")
async def process_check_subscription(callback: CallbackQuery, state: FSMContext, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_user_subscribed = await is_subscribed(bot, callback.from_user.id)
    
    if not is_user_subscribed:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π, –ø–æ–º–µ—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        # –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –Ω–∞–∂–∏–º–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        user_data = await state.get_data()
        retry_count = user_data.get('subscription_retry_count', 0) + 1
        await state.update_data(subscription_retry_count=retry_count)
        
        print(f"Subscription check retry count: {retry_count}")
        
        # –ü–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ
        if retry_count >= 3:
            print(f"Forcing subscription for user {callback.from_user.id} after {retry_count} retries")
            db.add_subscribed_user(
                user_id=callback.from_user.id,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name,
                username=callback.from_user.username,
                is_subscribed=True
            )
            
            try:
                await callback.message.edit_text(
                    "‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –ø–æ –î–î–£ (–≤ —Ä—É–±–ª—è—Ö). –ù–∞–ø—Ä–∏–º–µ—Ä: 3500000"
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await callback.message.answer(
                        "‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –ø–æ –î–î–£ (–≤ —Ä—É–±–ª—è—Ö). –ù–∞–ø—Ä–∏–º–µ—Ä: 3500000"
                    )
                else:
                    raise
            
            await state.set_state(PenaltyForm.contract_amount)
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        random_message = random.choice(SUBSCRIPTION_MESSAGES)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
        builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        
        try:
            await callback.message.edit_text(random_message, reply_markup=builder.as_markup())
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await callback.answer("‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
            else:
                raise
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
    db.add_subscribed_user(
        user_id=callback.from_user.id,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        username=callback.from_user.username
    )
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    try:
        await callback.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –ø–æ –î–î–£ (–≤ —Ä—É–±–ª—è—Ö). –ù–∞–ø—Ä–∏–º–µ—Ä: 3500000"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –ø–æ –î–î–£ (–≤ —Ä—É–±–ª—è—Ö). –ù–∞–ø—Ä–∏–º–µ—Ä: 3500000"
            )
        else:
            raise
    
    await state.set_state(PenaltyForm.contract_amount)


# Reset command handler
@router.message(Command("reset"))
async def cmd_reset(message: Message, state: FSMContext, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    is_user_subscribed = await is_subscribed(bot, message.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.add_subscribed_user(
        user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username,
        is_subscribed=is_user_subscribed
    )
    
    if not is_user_subscribed:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
        builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        
        await message.answer(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(PenaltyForm.check_subscription)
        return

    await state.clear()
    
    await message.answer(
        "üîÑ –†–∞—Å—á–µ—Ç —Å–±—Ä–æ—à–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )


# Contract amount handler
@router.message(PenaltyForm.contract_amount)
async def process_contract_amount(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith('/'):
        await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—É–º–º–∞ –ø–æ –î–î–£, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")
        return
    
    # Validate input
    is_valid, amount, error = validate_amount(message.text)
    
    if not is_valid:
        await message.answer(f"‚ùå {error}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    
    # Save to state
    await state.update_data(contract_amount=amount)
    
    await message.answer(
        "‚úÖ –°—É–º–º–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞–π–Ω—é—é –¥–∞—Ç—É –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –î–î–£ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 07.02.2025"
    )
    
    await state.set_state(PenaltyForm.deadline_date)


# Deadline date handler
@router.message(PenaltyForm.deadline_date)
async def process_deadline_date(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith('/'):
        await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")
        return
    
    # Validate input
    is_valid, date_obj, error = validate_date(message.text)
    
    if not is_valid:
        await message.answer(f"‚ùå {error}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
        return
    
    # Save to state
    await state.update_data(deadline_date=date_obj, deadline_date_str=message.text)
    
    await message.answer(
        "‚úÖ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ—É—Å—Ç–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 20.05.2025"
    )
    
    await state.set_state(PenaltyForm.calculation_date)


# Calculation date handler
@router.message(PenaltyForm.calculation_date)
async def process_calculation_date(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith('/'):
        await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ—É—Å—Ç–æ–π–∫–∏, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")
        return
    
    # Get deadline date from state
    user_data = await state.get_data()
    deadline_date_str = user_data.get("deadline_date_str")
    
    # Validate input
    is_valid, date_obj, error = validate_date(message.text)
    
    if not is_valid:
        await message.answer(f"‚ùå {error}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
        return
    
    # Check that calculation date is after deadline date
    deadline_date = user_data.get("deadline_date")
    if date_obj <= deadline_date:
        await message.answer(
            "‚ùå –î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –∫—Ä–∞–π–Ω–µ–π –¥–∞—Ç—ã –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
        )
        return
    
    # Save to state
    await state.update_data(calculation_date=date_obj, calculation_date_str=message.text)
    
    # Create keyboard for participant type
    builder = InlineKeyboardBuilder()
    builder.button(text="–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="participant:individual")
    builder.button(text="–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="participant:legal")
    builder.adjust(1)  # Place buttons in a column
    
    await message.answer(
        "‚úÖ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ–ª–µ–≤–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PenaltyForm.participant_type)


# Participant type callback handler
@router.callback_query(PenaltyForm.participant_type, F.data.startswith("participant:"))
async def process_participant_type(callback: CallbackQuery, state: FSMContext):
    # Extract participant type from callback data
    participant_type = callback.data.split(":")[1]
    is_individual = participant_type == "individual"
    
    # Save to state
    await state.update_data(is_individual=is_individual)
    
    # Create keyboard for unique object
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞", callback_data="unique:yes")
    builder.button(text="–ù–µ—Ç", callback_data="unique:no")
    builder.adjust(2)  # Place buttons in a row
    
    await callback.message.edit_text(
        "‚úÖ –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç.\n\n"
        "–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º?",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PenaltyForm.is_unique)


# Unique object callback handler
@router.callback_query(PenaltyForm.is_unique, F.data.startswith("unique:"))
async def process_unique_object(callback: CallbackQuery, state: FSMContext):
    # Extract unique object status from callback data
    is_unique = callback.data.split(":")[1] == "yes"
    
    # Save to state
    await state.update_data(is_unique=is_unique)
    
    # Get all user data from state
    user_data = await state.get_data()
    
    await callback.message.edit_text(
        "‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã. –†–∞—Å—á–µ—Ç –Ω–µ—É—Å—Ç–æ–π–∫–∏...\n\n"
        "üî¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:\n"
        f"üí∞ –°—É–º–º–∞ –ø–æ –î–î–£: {user_data['contract_amount']:,.2f} —Ä—É–±.\n"
        f"üìÖ –î–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ –î–î–£: {user_data['deadline_date_str']}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞: {user_data['calculation_date_str']}\n"
        f"üë§ –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞: {'–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ' if user_data['is_individual'] else '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ'}\n"
        f"üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç: {'–î–∞' if user_data['is_unique'] else '–ù–µ—Ç'}"
    )
    
    # Fetch data from Google Sheets
    try:
        sheets_service = GoogleSheetsService()
        rates_data = sheets_service.get_rates_and_moratoriums()
        
        # Calculate penalty
        calculator = PenaltyCalculator(rates_data)
        result = calculator.calculate_penalty(
            contract_amount=user_data["contract_amount"],
            deadline_date=user_data["deadline_date"],
            calculation_date=user_data["calculation_date"],
            is_individual=user_data["is_individual"],
            is_unique_object=user_data["is_unique"]
        )
        
        # Format message based on result
        if "message" in result:
            await callback.message.answer(result["message"])
            return
        
        # Format the result message
        participant_type = "–§–∏–∑–ª–∏—Ü–æ" if result["is_individual"] else "–Æ—Ä–ª–∏—Ü–æ"
        object_type = "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–æ–º" if result["is_unique_object"] else "–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–æ–º"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –≤ –ë–î
        calculation_data = {**user_data, **result}
        db.save_calculation(callback.from_user.id, calculation_data)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
        builder = InlineKeyboardBuilder()
        builder.button(text="üöÄ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")
        builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="quick_help")
        builder.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="quick_about")
        builder.adjust(1, 2)  # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ —Ä—è–¥
        
        await callback.message.answer(
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è –Ω–µ—É—Å—Ç–æ–π–∫–∞: {result['penalty_amount']:,.2f} —Ä—É–±.\n"
            f"üìÖ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {result['delay_days']} –¥–Ω–µ–π "
            f"(–∏–∑ –Ω–∏—Ö {result['moratorium_days']} –¥–Ω–µ–π –ø–æ–¥ –º–æ—Ä–∞—Ç–æ—Ä–∏–µ–º)\n"
            f"üíπ –°—Ç–∞–≤–∫–∞ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: {result['refinancing_rate']:.2f}% "
            f"(–Ω–∞ –¥–∞—Ç—É {user_data['deadline_date_str']})\n"
            f"üî¢ –£—Å–ª–æ–≤–∏—è: {participant_type}, {object_type}\n\n"
            f"–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start\n"
            f"–î–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset",
            reply_markup=builder.as_markup()
        )
        
        # Clear state
        await state.clear()
        
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–µ—É—Å—Ç–æ–π–∫–∏: {str(e)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        # Clear state
        await state.clear()


# Callback handlers for quick actions
@router.callback_query(F.data == "quick_help")
async def process_quick_help(callback: CallbackQuery):
    help_text = (
        "‚ùì <b>–ö—Ä–∞—Ç–∫–∞—è –ø–æ–º–æ—â—å</b>\n\n"
        "üìã <b>–ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:</b>\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –î–î–£\n"
        "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫—Ä–∞–π–Ω—é—é –¥–∞—Ç—É –ø–µ—Ä–µ–¥–∞—á–∏\n"
        "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—á–µ—Ç–∞\n"
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞\n\n"
        
        "üí° <b>–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:</b>\n"
        "‚Ä¢ –î–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì (15.03.2025)\n"
        "‚Ä¢ –°—É–º–º—ã: –º–æ–∂–Ω–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏\n\n"
        
        "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
    )
    
    await callback.answer()
    await callback.message.answer(help_text, parse_mode="HTML")


@router.callback_query(F.data == "quick_about")
async def process_quick_about(callback: CallbackQuery):
    about_text = (
        "‚ÑπÔ∏è <b>–û –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –Ω–µ—É—Å—Ç–æ–π–∫–∏</b>\n\n"
        "üéØ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ—É—Å—Ç–æ–π–∫—É –ø–æ –î–î–£ —Å–æ–≥–ª–∞—Å–Ω–æ –§–ó-214\n\n"
        
        "üßÆ <b>–§–æ—Ä–º—É–ª—ã:</b>\n"
        "‚Ä¢ –§–õ: 1/150 √ó —Å—Ç–∞–≤–∫–∞ –¶–ë √ó —Å—É–º–º–∞ √ó –¥–Ω–∏\n"
        "‚Ä¢ –Æ–õ: 1/300 √ó —Å—Ç–∞–≤–∫–∞ –¶–ë √ó —Å—É–º–º–∞ √ó –¥–Ω–∏\n"
        "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ: –º–∞–∫—Å. 5% –æ—Ç —Å—É–º–º—ã\n\n"
        
        "üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –º–æ—Ä–∞—Ç–æ—Ä–∏–π\n\n"
        
        "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /about"
    )
    
    await callback.answer()
    await callback.message.answer(about_text, parse_mode="HTML")


@router.callback_query(F.data == "new_calculation")
async def process_new_calculation(callback: CallbackQuery, state: FSMContext, bot: Bot):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_user_subscribed = await is_subscribed(bot, callback.from_user.id)
    
    if not is_user_subscribed:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
        builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        
        await callback.message.answer(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(PenaltyForm.check_subscription)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    db.add_subscribed_user(
        user_id=callback.from_user.id,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        username=callback.from_user.username,
        is_subscribed=True
    )
    
    await callback.answer()
    await callback.message.answer(
        "üöÄ <b>–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –Ω–µ—É—Å—Ç–æ–π–∫–∏ –ø–æ –î–î–£</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –ø–æ –î–î–£ (–≤ —Ä—É–±–ª—è—Ö). –ù–∞–ø—Ä–∏–º–µ—Ä: 3500000",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="quick_help")
    builder.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="quick_about")
    builder.adjust(2)
    
    await callback.message.answer(
        "üí° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(PenaltyForm.contract_amount) 